/*
 * KomMonitor Harvester API
 * KomMonitor Harvester API to harvest/transfer spatial data from one instance to another
 *
 * OpenAPI spec version: 0.0.1
 * Contact: christian.danowski-buhren@hs-bochum.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.27
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.KomMonitorHarvesterApi);
  }
}(this, function(expect, KomMonitorHarvesterApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('SpatialDataMappingType', function() {
      beforeEach(function() {
        instance = new KomMonitorHarvesterApi.SpatialDataMappingType();
      });

      it('should create an instance of SpatialDataMappingType', function() {
        // TODO: update the code to test SpatialDataMappingType
        expect(instance).to.be.a(KomMonitorHarvesterApi.SpatialDataMappingType);
      });

      it('should have the property sourceDatasetId (base name: "sourceDatasetId")', function() {
        // TODO: update the code to test the property sourceDatasetId
        expect(instance).to.have.property('sourceDatasetId');
        // expect(instance.sourceDatasetId).to.be(expectedValueLiteral);
      });

      it('should have the property targetDatasetId (base name: "targetDatasetId")', function() {
        // TODO: update the code to test the property targetDatasetId
        expect(instance).to.have.property('targetDatasetId');
        // expect(instance.targetDatasetId).to.be(expectedValueLiteral);
      });

      it('should have the property sourceFeatureIdPrefix (base name: "sourceFeatureIdPrefix")', function() {
        // TODO: update the code to test the property sourceFeatureIdPrefix
        expect(instance).to.have.property('sourceFeatureIdPrefix');
        // expect(instance.sourceFeatureIdPrefix).to.be(expectedValueLiteral);
      });

      it('should have the property targetFeatureIdPrefix (base name: "targetFeatureIdPrefix")', function() {
        // TODO: update the code to test the property targetFeatureIdPrefix
        expect(instance).to.have.property('targetFeatureIdPrefix');
        // expect(instance.targetFeatureIdPrefix).to.be(expectedValueLiteral);
      });

      it('should have the property sourceFeatureIdSuffix (base name: "sourceFeatureIdSuffix")', function() {
        // TODO: update the code to test the property sourceFeatureIdSuffix
        expect(instance).to.have.property('sourceFeatureIdSuffix');
        // expect(instance.sourceFeatureIdSuffix).to.be(expectedValueLiteral);
      });

      it('should have the property targetFeatureIdSuffix (base name: "targetFeatureIdSuffix")', function() {
        // TODO: update the code to test the property targetFeatureIdSuffix
        expect(instance).to.have.property('targetFeatureIdSuffix');
        // expect(instance.targetFeatureIdSuffix).to.be(expectedValueLiteral);
      });

    });
  });

}));
