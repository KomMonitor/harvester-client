/*
 * KomMonitor Harvester API
 * KomMonitor Harvester API to harvest/transfer spatial data from one instance to another
 *
 * OpenAPI spec version: 0.0.1
 * Contact: christian.danowski-buhren@hs-bochum.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.27
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from './ApiClient';
import {AuthenticationType} from './model/AuthenticationType';
import {DataMappingType} from './model/DataMappingType';
import {HarvesterInputType} from './model/HarvesterInputType';
import {HarvesterOutputType} from './model/HarvesterOutputType';
import {IndicatorDataMappingType} from './model/IndicatorDataMappingType';
import {IndicatorSpatialUnitMappingResultType} from './model/IndicatorSpatialUnitMappingResultType';
import {IndicatorSpatialUnitMappingType} from './model/IndicatorSpatialUnitMappingType';
import {IndicatorSummaryType} from './model/IndicatorSummaryType';
import {KomMonitorInstanceType} from './model/KomMonitorInstanceType';
import {PeriodOfValidityType} from './model/PeriodOfValidityType';
import {SpatialDataMappingType} from './model/SpatialDataMappingType';
import {SpatialUnitDataMappingType} from './model/SpatialUnitDataMappingType';
import {SpatialUnitSummaryType} from './model/SpatialUnitSummaryType';
import {SummaryType} from './model/SummaryType';
import {SummaryTypeErrorsOccurred} from './model/SummaryTypeErrorsOccurred';
import {HarvesterApi} from './api/HarvesterApi';

/**
* KomMonitor_Harvester_API_to_harvesttransfer_spatial_data_from_one_instance_to_another.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var KomMonitorHarvesterApi = require('index'); // See note below*.
* var xxxSvc = new KomMonitorHarvesterApi.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new KomMonitorHarvesterApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new KomMonitorHarvesterApi.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new KomMonitorHarvesterApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 0.0.1
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The AuthenticationType model constructor.
     * @property {module:model/AuthenticationType}
     */
    AuthenticationType,

    /**
     * The DataMappingType model constructor.
     * @property {module:model/DataMappingType}
     */
    DataMappingType,

    /**
     * The HarvesterInputType model constructor.
     * @property {module:model/HarvesterInputType}
     */
    HarvesterInputType,

    /**
     * The HarvesterOutputType model constructor.
     * @property {module:model/HarvesterOutputType}
     */
    HarvesterOutputType,

    /**
     * The IndicatorDataMappingType model constructor.
     * @property {module:model/IndicatorDataMappingType}
     */
    IndicatorDataMappingType,

    /**
     * The IndicatorSpatialUnitMappingResultType model constructor.
     * @property {module:model/IndicatorSpatialUnitMappingResultType}
     */
    IndicatorSpatialUnitMappingResultType,

    /**
     * The IndicatorSpatialUnitMappingType model constructor.
     * @property {module:model/IndicatorSpatialUnitMappingType}
     */
    IndicatorSpatialUnitMappingType,

    /**
     * The IndicatorSummaryType model constructor.
     * @property {module:model/IndicatorSummaryType}
     */
    IndicatorSummaryType,

    /**
     * The KomMonitorInstanceType model constructor.
     * @property {module:model/KomMonitorInstanceType}
     */
    KomMonitorInstanceType,

    /**
     * The PeriodOfValidityType model constructor.
     * @property {module:model/PeriodOfValidityType}
     */
    PeriodOfValidityType,

    /**
     * The SpatialDataMappingType model constructor.
     * @property {module:model/SpatialDataMappingType}
     */
    SpatialDataMappingType,

    /**
     * The SpatialUnitDataMappingType model constructor.
     * @property {module:model/SpatialUnitDataMappingType}
     */
    SpatialUnitDataMappingType,

    /**
     * The SpatialUnitSummaryType model constructor.
     * @property {module:model/SpatialUnitSummaryType}
     */
    SpatialUnitSummaryType,

    /**
     * The SummaryType model constructor.
     * @property {module:model/SummaryType}
     */
    SummaryType,

    /**
     * The SummaryTypeErrorsOccurred model constructor.
     * @property {module:model/SummaryTypeErrorsOccurred}
     */
    SummaryTypeErrorsOccurred,

    /**
    * The HarvesterApi service constructor.
    * @property {module:api/HarvesterApi}
    */
    HarvesterApi
};
